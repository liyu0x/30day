     1 00000000                                 ; snail-os
     2 00000000                                 ; TAB=4
     3 00000000                                 	
     4                                          		ORG	0x7c00			; 指明程序的装载地址, 0x7c00是主引导记录的内存地址
     5 00007C00                                 
     6 00007C00                                 ; 以下这段是标准FAT12格式软盘的专用代码
     7 00007C00 EB 4E                           		JMP entry
     8 00007C02 90                              		DB	0x90
     9 00007C03 48 45 4C 4C 4F 49 50 54         		DB	"HELLOIPT"		; 启动区的名称可以是任意的字符串(8字节)
    10 00007C0B 0200                            		DW	512				; 每个扇区的大小(必须是512)
    11 00007C0D 01                              		DB	1				; 簇的大小(必须为1个扇区)
    12 00007C0E 0001                            		DW	1				; FAT的起始位置(一般从第一个扇区开始)
    13 00007C10 02                              		DB	2				; FAT的个数(必须为2)
    14 00007C11 00E0                            		DW	224				; 根目录的大小(一般设置成224项)
    15 00007C13 0B40                            		DW 	2880			; 该磁盘的大小(必须是2880扇区)
    16 00007C15 F0                              		DB	0xf0			; 磁盘的种类(必须是0xf0)
    17 00007C16 0009                            		DW	9				; FAT的长度(必须是9扇区)
    18 00007C18 0012                            		DW	18				; 1个磁道有几个扇区(必须是18)
    19 00007C1A 0002                            		DW	2				; 磁头数(必须是2)
    20 00007C1C 00000000                        		DD	0				; 不使用分区，必须是0
    21 00007C20 00000B40                        		DD 	2880			; 重写一次磁盘大小
    22 00007C24 00 00 29                        		DB	0,0,0x29		; 意义不明，固定
    23 00007C27 FFFFFFFF                        		DD	0xffffffff		; (可能是) 标卷号码
    24 00007C2B 53 4E 41 49 4C 2D 4F 53 20 20   		DB	"SNAIL-OS   "		; 磁盘的名称(11字节)
       00007C35 20 
    25 00007C36 46 41 54 31 32 20 20 20         		DB	"FAT12   "			; 磁盘格式的名称(8字节)
    26 00007C3E 00 00 00 00 00 00 00 00 00 00   		RESB	18			; 先空出18字节	
       00007C48 00 00 00 00 00 00 00 00 
    27 00007C50                                 
    28 00007C50                                 ; 程序核心
    29 00007C50                                 
    30 00007C50                                 entry:						; 是一个标签的声明, 用于指定JMP指令跳转的目的地等.
    31 00007C50 B8 0000                         		MOV	AX,0			; 初始化寄存器			
    32 00007C53 8E D0                           		MOV	SS,AX			
    33 00007C55 BC 7C00                         		MOV	SP,0x7c00
    34 00007C58 8E D8                           		MOV DS,AX
    35 00007C5A 8E C0                           		MOV ES,AX
    36 00007C5C                                 
    37 00007C5C BE 7C74                         		MOV SI,msg			; 将msg的位置存入SI，它的位置在这里是0x7c74
    38 00007C5F                                 
    39 00007C5F                                 putloop:
    40 00007C5F 8A 04                           		MOV AL,[SI]			; 方括号代表内存地址
    41 00007C61 83 C6 01                        		ADD SI,1			; 给SI加1
    42 00007C64 3C 00                           		CMP AL,0			
    43 00007C66                                 
    44 00007C66 74 09                           		JE	fin				; 如果上面的判断相等，跳转到哪儿，否则直接执行下面的指令
    45 00007C68 B4 0E                           		MOV AH,0x0e			; 显示一个文字
    46 00007C6A BB 000F                         		MOV BX,15			; 指定字符颜色、
    47 00007C6D CD 10                           		INT 0x10			; 调用显卡BIOS
    48 00007C6F EB EE                           		JMP putloop
    49 00007C71                                 
    50 00007C71                                 fin:
    51 00007C71 F4                              		HLT 				; 让CPU停止，等待指令
    52 00007C72 EB FD                           		JMP	fin				; 无限循环
    53 00007C74                                 
    54 00007C74                                 msg:
    55 00007C74 0A 0A                           		DB 0x0a, 0x0a		; 2个换行 
    56 00007C76 68 65 6C 6C 6F 2C 20 77 6F 72   		DB "hello, world"
       00007C80 6C 64 
    57 00007C82 0A                              		DB 0x0a				; 换行
    58 00007C83 20 66 72 6F 6D 20 53 6E 61 69   		DB " from Snail(Day two)"
       00007C8D 6C 28 44 61 79 20 74 77 6F 29 
    59 00007C97 00                              		DB 0				
    60 00007C98                                 
    61 00007C98 00 00 00 00 00 00 00 00 00 00   		RESB 0x7dfe-$		; 填写0x00, 直到 0x7dfe
       00007CA2 00 00 00 00 00 00 00 00 00 00 
       00007CAC 00 00 00 00 00 00 00 00 00 00 
       00007CB6 00 00 00 00 00 00 00 00 00 00 
       00007CC0 00 00 00 00 00 00 00 00 00 00 
       00007CCA 00 00 00 00 00 00 00 00 00 00 
       00007CD4 00 00 00 00 00 00 00 00 00 00 
       00007CDE 00 00 00 00 00 00 00 00 00 00 
       00007CE8 00 00 00 00 00 00 00 00 00 00 
       00007CF2 00 00 00 00 00 00 00 00 00 00 
       00007CFC 00 00 00 00 00 00 00 00 00 00 
       00007D06 00 00 00 00 00 00 00 00 00 00 
       00007D10 00 00 00 00 00 00 00 00 00 00 
       00007D1A 00 00 00 00 00 00 00 00 00 00 
       00007D24 00 00 00 00 00 00 00 00 00 00 
       00007D2E 00 00 00 00 00 00 00 00 00 00 
       00007D38 00 00 00 00 00 00 00 00 00 00 
       00007D42 00 00 00 00 00 00 00 00 00 00 
       00007D4C 00 00 00 00 00 00 00 00 00 00 
       00007D56 00 00 00 00 00 00 00 00 00 00 
       00007D60 00 00 00 00 00 00 00 00 00 00 
       00007D6A 00 00 00 00 00 00 00 00 00 00 
       00007D74 00 00 00 00 00 00 00 00 00 00 
       00007D7E 00 00 00 00 00 00 00 00 00 00 
       00007D88 00 00 00 00 00 00 00 00 00 00 
       00007D92 00 00 00 00 00 00 00 00 00 00 
       00007D9C 00 00 00 00 00 00 00 00 00 00 
       00007DA6 00 00 00 00 00 00 00 00 00 00 
       00007DB0 00 00 00 00 00 00 00 00 00 00 
       00007DBA 00 00 00 00 00 00 00 00 00 00 
       00007DC4 00 00 00 00 00 00 00 00 00 00 
       00007DCE 00 00 00 00 00 00 00 00 00 00 
       00007DD8 00 00 00 00 00 00 00 00 00 00 
       00007DE2 00 00 00 00 00 00 00 00 00 00 
       00007DEC 00 00 00 00 00 00 00 00 00 00 
       00007DF6 00 00 00 00 00 00 00 00 
    62 00007DFE                                 
    63 00007DFE 55 AA                           		DB 0x55, 0xaa
    64 00007E00                                 
    65 00007E00                                 
    66 00007E00                                 ; 汇编指令解释：
    67 00007E00                                 
    68 00007E00                                 ; DB(data byte): 写入一个字节, 或写入一个字符串(编译器自行寻找字符对应的编码并且转换为对应的指令, 不用自己找字符编码对照表)
    69 00007E00                                 
    70 00007E00                                 ; DW(data world): 写入双字节, 等同于16位
    71 00007E00                                 
    72 00007E00                                 ; DD(data double-word): 写入四字节，等同于32位
    73 00007E00                                 
    74 00007E00                                 ; RESB(reserve byte): 从现在的位置开始空出n个字节并且自动填充0x00(仅限于作者提供的编译器中), 关于line-39出现的带有美元符号的使用方法的含义为: 美元代表当前已输入字节，0x1fe-当前已输入字节得到它需要填充0x00的字节数
    75 00007E00                                 
    76 00007E00                                 ; ORG(origin): 指令会告诉nask(编译器), 在开始执行的时候，把这些机器语言指令装载到内存中的哪个地址(装载位置的起始地址)。如果没有它，有几个机器指令无法执行。并且美元符号的含义也发生改变：它不在表示输出文件的第几个字节，而是代表将要读入的内存地址. 这个指令也被称为"伪指令", 因为它不是机器指令.
    77 00007E00                                 
    78 00007E00                                 ; JMP(jump): 类似于C的GOTO关键字
    79 00007E00                                 
    80 00007E00                                 ; ADD: 加法指令
    81 00007E00                                 
    82 00007E00                                 ; CMP: 比较指令
    83 00007E00                                 
    84 00007E00                                 ; JE(jump if equal): CMP指令如果返回真，则执行它
    85 00007E00                                 
    86 00007E00                                 ; INT(interrupt): 中断指令
    87 00007E00                                 
    88 00007E00                                 ; HLT: 让CPU进入待机状态
    89 00007E00                                 
    90 00007E00                                 ; MOV(move): 赋值指令, 虽然MOVE是移动的意思，但是与真正的移动不一样，当值被赋给其他的变量时，这个变量本身依然持有这个值，所以叫做“赋值”，关于这个指令，拆开解释:
    91 00007E00                                 ; 1. MOV AX,0			相当于AX=0
    92 00007E00                                 ; 2. MOV AX,SS			相当于AX=SS
    93 00007E00                                 ; 如果MOV 后面有括号，表示内存地址
    94 00007E00                                 
    95 00007E00                                 ; 关于上面的AX和SS是什么? 这是寄存器，通常由8个寄存器(均为16位寄存器):
    96 00007E00                                 ; AX ---- accumulator 累加寄存器
    97 00007E00                                 ; CX ---- counter 计数寄存器
    98 00007E00                                 ; DX ---- data 数据寄存器
    99 00007E00                                 ; BX ---- base 基址寄存器
   100 00007E00                                 ; SP ---- stack pointer 栈指针寄存器
   101 00007E00                                 ; BP ---- base pointer 基址指针寄存器
   102 00007E00                                 ; SI ---- source index 源址寄存器
   103 00007E00                                 ; DI ---- destination index 目的变址寄存器
   104 00007E00                                 ; 另外，上面的某些寄存器被分为:
   105 00007E00                                 ; AL ---- accumulator low 累加寄存器低位
   106 00007E00                                 ; CL ---- counter low
   107 00007E00                                 ; DL ---- data low
   108 00007E00                                 ; BL ---- base low
   109 00007E00                                 ; AH ---- accumulator high 累加寄存器高位
   110 00007E00                                 ; CH ---- counter high
   111 00007E00                                 ; DH ---- data high
   112 00007E00                                 ; BH ---- base high
   113 00007E00                                 ; 32位寄存器:
   114 00007E00                                 ; EAX, ECX, EDX, EBX, ESP, EBP, ESI, EDI, 在16位寄存器前面加个E就行了
   115 00007E00                                 ; 段寄存器:
   116 00007E00                                 ; ES ---- 附加段寄存器(extra segment)
   117 00007E00                                 ; CS ---- 代码段寄存器(code segment)
   118 00007E00                                 ; SS ---- 栈段寄存器(stack segment)
   119 00007E00                                 ; DS ---- 数据段寄存器(data segment)
   120 00007E00                                 ; FS ---- nameless(segment part 2)
   121 00007E00                                 ; GS ---- nameless(segment part 3)
   122 00007E00                                 
   123 00007E00                                 ; FAT参数解释:
   124 00007E00                                 ; FAT12(FAT12 Format): windows或ms-dos格式化出来的格式，我们使用它来搭载我们的系统以保证兼容性
   125 00007E00                                 ; 启动区(boot sector): 软盘的第一个扇区成为启动区, 计算机从软盘上每次读取512字节的内容，所以扇区大小为512, 第一个扇区的最两个字节必须是55 AA, 否则计算机将拒绝承认磁盘上有操作系统、
   126 00007E00                                 ; IPL(initial program loader): 启动程序加载器，这里只有512字节，但一般的操作系统非常大，这是不够用的。几乎所有的操作系统都把加载操作系统本身的程序放在IPL中，但本系统没有加载程序的功能，所以 "HELLOIPT" 仅仅是用来填充作用的, 如果名字不够8字节还得空格补齐。
   127 00007E00                                 
   128 00007E00                                 ; 这段代码的C语言翻译版(部分):
   129 00007E00                                 ; entry:
   130 00007E00                                 ;		AX = 0;
   131 00007E00                                 ;		SS = AX;
   132 00007E00                                 ;		SP = 0x7c00;
   133 00007E00                                 ;		DS = AX;
   134 00007E00                                 ;		ES = AX;
   135 00007E00                                 ;		SI = msg;
   136 00007E00                                 ; putloop:
   137 00007E00                                 ;		AL = BYTE[SI];
   138 00007E00                                 ;		SI = SI + 1;
   139 00007E00                                 ;		IF(AL == 0) {goto fin;}
   140 00007E00                                 ;		AH = 0X0e;
   141 00007E00                                 ;		BX = 15;
   142 00007E00                                 ;		INT 0x10;
   143 00007E00                                 ;		goto putloop;
   144 00007E00                                 ; fin:
   145 00007E00                                 ;		HLT;
   146 00007E00                                 ;		goto fin;
   147 00007E00                                 ; 就是将寄存器里面的字符一个一个打在屏幕上