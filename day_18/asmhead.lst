     1 00000000                                 ; haribote-os boot asm
     2 00000000                                 ; TAB=4
     3 00000000                                 
     4 00000000                                 [INSTRSET "i486p"]
     5 00000000                                 
     6  = 00280000                              BOTPAK	EQU		0x00280000		; bootpack�̃��[�h��
     7  = 00100000                              DSKCAC	EQU		0x00100000		; �f�B�X�N�L���b�V���̏ꏊ
     8  = 00008000                              DSKCAC0	EQU		0x00008000		; �f�B�X�N�L���b�V���̏ꏊ�i���A�����[�h�j
     9 00000000                                 
    10 00000000                                 ; BOOT_INFO�֌W
    11  = 00000FF0                              CYLS	EQU		0x0ff0			; �u�[�g�Z�N�^���ݒ肷��
    12  = 00000FF1                              LEDS	EQU		0x0ff1
    13  = 00000FF2                              VMODE	EQU		0x0ff2			; �F���Ɋւ�����B���r�b�g�J���[���H
    14  = 00000FF4                              SCRNX	EQU		0x0ff4			; �𑜓x��X
    15  = 00000FF6                              SCRNY	EQU		0x0ff6			; �𑜓x��Y
    16  = 00000FF8                              VRAM	EQU		0x0ff8			; �O���t�B�b�N�o�b�t�@�̊J�n�Ԓn
    17 00000000                                 
    18                                          		ORG		0xc200			; ���̃v���O�������ǂ��ɓǂݍ��܂��̂�
    19 0000C200                                 
    20 0000C200                                 
    21  = 00000105                              VBEMODE	EQU		0x105
    22 0000C200                                 ; VBE画面模式号码如下:
    23 0000C200                                 ; 	0x101	-	640*480*8bit 彩色
    24 0000C200                                 ;	0x103	-	800*600*8bit 彩色
    25 0000C200                                 ;	0x105	-	1024*768*8bit 彩色
    26 0000C200                                 ;	0x107	-	1280*1024*8bit 彩色
    27 0000C200                                 ;   在EQMU下不能指定0x107的模式, 实际指定上面的值的时候, 需要将画面模式号码值加上0x4000, 再赋值到BX中去.
    28 0000C200                                 
    29 0000C200                                 ; 确认是否能使用VBE, gei ES赋值为0x9000, 给DI赋值为0, 给AX赋值为0x4f00, 再执行"INT 0x10", 如果有VBE的话
    30 0000C200                                 ; AX就会变为0x004f, 至于为什么要给AX和DI赋值是因为显卡的VBE信息会写入ES:DI开始的512字节中, 赋值是为
    31 0000C200                                 ; 了指定地址
    32 0000C200 B8 9000                         		MOV		AX,0x9000
    33 0000C203 8E C0                           		MOV		ES,AX
    34 0000C205 BF 0000                         		MOV		DI,0
    35 0000C208 B8 4F00                         		MOV		AX,0x4f00
    36 0000C20B CD 10                           		INT		0x10
    37 0000C20D 3D 004F                         		CMP		AX,0x004f
    38 0000C210 75 52                           		JNE		scrn320
    39 0000C212                                 
    40 0000C212                                 
    41 0000C212                                 ; 检查VBE版本
    42 0000C212 26 8B 45 04                     		MOV		AX,[ES:DI+4]
    43 0000C216 3D 0200                         		CMP		AX,0x0200
    44 0000C219 72 49                           		JB		scrn320			; if (AX < 0x0200) goto scrn320
    45 0000C21B                                 
    46 0000C21B                                 
    47 0000C21B                                 ; 取得画面模式信息
    48 0000C21B B9 0105                         		MOV		CX,VBEMODE
    49 0000C21E B8 4F01                         		MOV		AX,0x4f01
    50 0000C221 CD 10                           		INT		0x10
    51 0000C223 3D 004F                         		CMP		AX,0x004f
    52 0000C226 75 3C                           		JNE		scrn320
    53 0000C228                                 ; 画面模式信息, 重要的信息有如下6个:
    54 0000C228                                 ; WORD	[ES:DI+0x00]	:	模式属性, bit7, 不是1就不好办(能加上0x4000)
    55 0000C228                                 ; WORD	[ES:DI+0x12]	:	X的分辨率
    56 0000C228                                 ; WORD	[ES:DI+0x14]	:	Y的分辨率
    57 0000C228                                 ; WORD	[ES:DI+0X19]	:	颜色数, 必须为8
    58 0000C228                                 ; WORD	[ES:DI+0x1b]	:	颜色的指定方法, 必须为4(4是调色板模式)
    59 0000C228                                 ; WORD	[ES:Di+0x28]	: 	VRAM的地址
    60 0000C228                                 
    61 0000C228                                 ; 确认显示模式信息
    62 0000C228                                 
    63 0000C228 26 80 7D 19 08                  		CMP		BYTE [ES:DI+0x19],8		; 	颜色数为8
    64 0000C22D 75 35                           		JNE		scrn320
    65 0000C22F 26 80 7D 1B 04                  		CMP		BYTE [ES:DI+0x1b],4		;	调色板模式
    66 0000C234 75 2E                           		JNE		scrn320
    67 0000C236 26 8B 05                        		MOV		AX,[ES:DI+0x00] 
    68 0000C239 25 0080                         		AND		AX,0x0080
    69 0000C23C 74 26                           		JZ		scrn320			; 模式属性的bit7是0, 所以放弃
    70 0000C23E                                 
    71 0000C23E                                 ; 画面模式的切换
    72 0000C23E                                 
    73 0000C23E BB 4105                         		MOV		BX,VBEMODE+0x4000
    74 0000C241 B8 4F02                         		MOV		AX,0x4f02
    75 0000C244 CD 10                           		INT		0x10
    76 0000C246 C6 06 0FF2 08                   		MOV		BYTE [VMODE],8	; 记下画面模式
    77 0000C24B 26 8B 45 12                     		MOV		AX,[ES:DI+0x12]
    78 0000C24F A3 0FF4                         		MOV		[SCRNX],AX
    79 0000C252 26 8B 45 14                     		MOV		AX,[ES:DI+0x14]
    80 0000C256 A3 0FF6                         		MOV		[SCRNY],AX
    81 0000C259 66 26 8B 45 28                  		MOV		EAX,[ES:DI+0x28]
    82 0000C25E 66 A3 0FF8                      		MOV		[VRAM],EAX
    83 0000C262 EB 20                           		JMP		keystatus
    84 0000C264                                 
    85 0000C264                                 scrn320:
    86 0000C264 B0 13                           		MOV		AL,0x13			; VGA模式
    87 0000C266 B4 00                           		MOV		AH,0x00
    88 0000C268 CD 10                           		INT		0x10
    89 0000C26A C6 06 0FF2 08                   		MOV		BYTE [VMODE],8	; 记下画面模式
    90 0000C26F C7 06 0FF4 0140                 		MOV		WORD [SCRNX],320
    91 0000C275 C7 06 0FF6 00C8                 		MOV		WORD [SCRNY],200
    92 0000C27B 66 C7 06 0FF8 000A0000          		MOV		DWORD [VRAM],0x000a0000
    93 0000C284                                 
    94 0000C284                                 
    95 0000C284                                 ; 使用VBE的画面设定模式 
    96 0000C284                                 ;		MOV		BX,0x4101		; VBE的640*480*8bit彩色
    97 0000C284                                 ;		MOV		AX,0x4f02
    98 0000C284                                 ;		INT		0x10
    99 0000C284                                 ;		MOV		BYTE [VMODE],8	; 记下画面模式
   100 0000C284                                 ;		MOV		WORD [SCRNX],640
   101 0000C284                                 ;		MOV		WORD [SCRNY],480
   102 0000C284                                 ;		MOV		DWORD [VRAM],0xe0000000
   103 0000C284                                 
   104 0000C284                                 ; 不使用VBE模式的显示设置(仅支持320*200)
   105 0000C284                                 ;		MOV		AL,0x13			; VGA的320*200*8bit彩色
   106 0000C284                                 ;		MOV		AH,0x00
   107 0000C284                                 ;		INT		0x10
   108 0000C284                                 ;		MOV		BYTE [VMODE],8	; 记下画面模式
   109 0000C284                                 ;		MOV		WORD [SCRNX],320
   110 0000C284                                 ;		MOV		WORD [SCRNY],200
   111 0000C284                                 ;		MOV		DWORD [VRAM],0x000a0000
   112 0000C284                                 
   113 0000C284                                 
   114 0000C284                                 ; 检查键盘状态
   115 0000C284                                 keystatus:
   116 0000C284 B4 02                           		MOV		AH,0x02
   117 0000C286 CD 16                           		INT		0x16 			; keyboard BIOS
   118 0000C288 A2 0FF1                         		MOV		[LEDS],AL
   119 0000C28B                                 
   120 0000C28B                                 
   121 0000C28B                                 
   122 0000C28B                                 ; PIC 关闭一切中断
   123 0000C28B                                 ;	根据AT兼容机的规格, 如果要初始化PIC
   124 0000C28B                                 ;	必须在CLI之前进行, 否则有时候会挂起
   125 0000C28B                                 ;	随后进行PIC的初始化
   126 0000C28B                                 
   127 0000C28B B0 FF                           		MOV		AL,0xff
   128 0000C28D E6 21                           		OUT		0x21,AL
   129 0000C28F 90                              		NOP						; NOP是让CPU休息一个时钟长的时间, 如果连续执行OUT命令, 有些机种会无法正常运行
   130 0000C290 E6 A1                           		OUT		0xa1,AL
   131 0000C292                                 
   132 0000C292 FA                              		CLI						; 禁止CPU级别的中断
   133 0000C293                                 
   134 0000C293                                 ; 为了让CPU能够访问1MB以上的内存空间, 设定A20GATE
   135 0000C293                                 
   136 0000C293 E8 00B5                         		CALL	waitkbdout
   137 0000C296 B0 D1                           		MOV		AL,0xd1
   138 0000C298 E6 64                           		OUT		0x64,AL
   139 0000C29A E8 00AE                         		CALL	waitkbdout
   140 0000C29D B0 DF                           		MOV		AL,0xdf			; enable A20
   141 0000C29F E6 60                           		OUT		0x60,AL
   142 0000C2A1 E8 00A7                         		CALL	waitkbdout
   143 0000C2A4                                 
   144 0000C2A4                                 ; 切换到保护模式
   145 0000C2A4                                 [INSTRSET "i486p"]				; "想要使用486指令"的叙述
   146 0000C2A4                                 
   147 0000C2A4 0F 01 16 C38A                   		LGDT	[GDTR0]			; 设定临时GDT
   148 0000C2A9 0F 20 C0                        		MOV		EAX,CR0
   149 0000C2AC 66 25 7FFFFFFF                  		AND		EAX,0x7fffffff	; 设bit31为0 (为了禁止颁)
   150 0000C2B2 66 83 C8 01                     		OR		EAX,0x00000001	; 设bit0为1 (为了切换到保护模式)
   151 0000C2B6 0F 22 C0                        		MOV		CR0,EAX
   152 0000C2B9 EB 00                           		JMP		pipelineflush
   153 0000C2BB                                 pipelineflush:
   154 0000C2BB B8 0008                         		MOV		AX,1*8			;  可读写的段 32bit
   155 0000C2BE 8E D8                           		MOV		DS,AX
   156 0000C2C0 8E C0                           		MOV		ES,AX
   157 0000C2C2 8E E0                           		MOV		FS,AX
   158 0000C2C4 8E E8                           		MOV		GS,AX
   159 0000C2C6 8E D0                           		MOV		SS,AX
   160 0000C2C8                                 
   161 0000C2C8                                 ; INSTRSET 指令: 是为了能够使用386以后的LGDT, EAX, CR0等关键字
   162 0000C2C8                                 ; CR0 只有操作系统才能使用的32位特殊寄存器
   163 0000C2C8                                 ; 保护模式: 在这种模式下, 应用程序既不能随便改变段的设定, 又不能使用操作系统专用的段, 操作系统收到CPU的保护.
   164 0000C2C8                                 
   165 0000C2C8                                 ; bootpack 转送
   166 0000C2C8                                 
   167 0000C2C8 66 BE 0000C390                  		MOV		ESI,bootpack	; 转送源
   168 0000C2CE 66 BF 00280000                  		MOV		EDI,BOTPAK		; 转送目的地
   169 0000C2D4 66 B9 00020000                  		MOV		ECX,512*1024/4	; 转送数据大小以双字节为单位
   170 0000C2DA E8 0075                         		CALL	memcpy
   171 0000C2DD                                 
   172 0000C2DD                                 ; 磁盘数据最终送到它本来的位置去
   173 0000C2DD                                 
   174 0000C2DD                                 ; 首先从启动扇区开始
   175 0000C2DD                                 
   176 0000C2DD 66 BE 00007C00                  		MOV		ESI,0x7c00		; 转送源
   177 0000C2E3 66 BF 00100000                  		MOV		EDI,DSKCAC		; 转送目的地
   178 0000C2E9 66 B9 00000080                  		MOV		ECX,512/4
   179 0000C2EF E8 0060                         		CALL	memcpy
   180 0000C2F2                                 
   181 0000C2F2                                 ; 所有剩下的
   182 0000C2F2                                 
   183 0000C2F2 66 BE 00008200                  		MOV		ESI,DSKCAC0+512	; 转送源
   184 0000C2F8 66 BF 00100200                  		MOV		EDI,DSKCAC+512	; 转送目的地
   185 0000C2FE 66 B9 00000000                  		MOV		ECX,0
   186 0000C304 8A 0E 0FF0                      		MOV		CL,BYTE [CYLS]
   187 0000C308 66 69 C9 00001200               		IMUL	ECX,512*18*2/4	; 从柱面数变换为字节数/4
   188 0000C30F 66 81 E9 00000080               		SUB		ECX,512/4		; 减去IPL
   189 0000C316 E8 0039                         		CALL	memcpy
   190 0000C319                                 
   191 0000C319                                 
   192 0000C319                                 
   193 0000C319                                 ; 必须由asmhead来完成的工作,至此已经全部完成
   194 0000C319                                 ;	以后就交由bootpack来完成
   195 0000C319                                 
   196 0000C319                                 ; bootpack的启动
   197 0000C319                                 
   198 0000C319 66 BB 00280000                  		MOV		EBX,BOTPAK
   199 0000C31F 67 66 8B 4B 10                  		MOV		ECX,[EBX+16]
   200 0000C324 66 83 C1 03                     		ADD		ECX,3			; ECX += 3;
   201 0000C328 66 C1 E9 02                     		SHR		ECX,2			; ECX /= 4;
   202 0000C32C 74 10                           		JZ		skip			; 没有要转送的东西时
   203 0000C32E 67 66 8B 73 14                  		MOV		ESI,[EBX+20]	; 转送源
   204 0000C333 66 01 DE                        		ADD		ESI,EBX
   205 0000C336 67 66 8B 7B 0C                  		MOV		EDI,[EBX+12]	; 转送目的地
   206 0000C33B E8 0014                         		CALL	memcpy
   207 0000C33E                                 skip:
   208 0000C33E 67 66 8B 63 0C                  		MOV		ESP,[EBX+12]	; 栈初始值
   209 0000C343 66 EA 0000001B 0010             		JMP		DWORD 2*8:0x0000001b  ; JMP的far模式, 再想EIP存入0x1b的同时, 将CS设置为2*8
   210 0000C34B                                 ; 它对bootpack.hrb的header(头部内容进行解析), 将执行所必须的数据传送过去. EBX里面带入的是
   211 0000C34B                                 ; BOTPAK, 所以值如下:
   212 0000C34B                                 ; [EBX + 16]......bootpack.hrb之后的16号地址, 值是0x11a8
   213 0000C34B                                 ; [EBX + 20]......bootpack.hrb之后的20号地址, 值是0x10c8
   214 0000C34B                                 ; [EBX + 12]......bootpack.hrb之后的12号地址, 值是0x00310000
   215 0000C34B                                 ; SHR 右移指令; JZ(jump if zero) 条件跳转指令, 根据前一个计算结构是否为0来决定是否跳转
   216 0000C34B                                 
   217 0000C34B                                 ; 这里主要是将bootpack.hrb第0x10c8字节开始的0x11a8字节复制到0x00310000号地址中.
   218 0000C34B                                 
   219 0000C34B                                 waitkbdout:
   220 0000C34B E4 64                           		IN		 AL,0x64
   221 0000C34D 24 02                           		AND		 AL,0x02
   222 0000C34F 75 FA                           		JNZ		waitkbdout		; AND的结果如果不是0, 就跳到waitkbdout
   223 0000C351 C3                              		RET
   224 0000C352                                 
   225 0000C352                                 memcpy:
   226 0000C352 67 66 8B 06                     		MOV		EAX,[ESI]
   227 0000C356 66 83 C6 04                     		ADD		ESI,4
   228 0000C35A 67 66 89 07                     		MOV		[EDI],EAX
   229 0000C35E 66 83 C7 04                     		ADD		EDI,4
   230 0000C362 66 83 E9 01                     		SUB		ECX,1
   231 0000C366 75 EA                           		JNZ		memcpy			; 减法运算的结果如果不是0, 就跳转到memcpy
   232 0000C368 C3                              		RET
   233 0000C369                                 
   234 0000C369                                 
   235 0000C369 00 00 00 00 00 00 00            		ALIGNB	16 			; 一直添加DBO, 直到地址能被16整除为止, 如果GDT0的地址不是8的整数倍, 向段寄存器赋值MOV的指令就会慢一些
   236 0000C370                                 GDT0:
   237 0000C370 00 00 00 00 00 00 00 00         		RESB	8				; NULL selector
   238 0000C378 FFFF 0000 9200 00CF             		DW		0xffff,0x0000,0x9200,0x00cf	; 可以读写的段(segment) 32bit
   239 0000C380 FFFF 0000 9A28 0047             		DW		0xffff,0x0000,0x9a28,0x0047	; 可以执行的段(segment) 32bit(bootpack用)
   240 0000C388                                 
   241 0000C388 0000                            		DW		0
   242 0000C38A                                 GDTR0:
   243 0000C38A 0017                            		DW		8*3-1
   244 0000C38C 0000C370                        		DD		GDT0
   245 0000C390                                 
   246 0000C390                                 		ALIGNB	16
   247 0000C390                                 bootpack:
