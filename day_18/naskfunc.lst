     1 00000000                                 ; naskfunc
     2 00000000                                 ; TAB=4
     3 00000000                                 
     4 00000000                                 [FORMAT "WCOFF"]                ; 制作目标文件的模式
     5 00000000                                 [INSTRSET "i486p"]              ; 声明用于486CPU
     6 00000000                                 [BITS 32]                       ; 制作32位模式用的机器语言
     7 00000000                                 
     8 00000000                                 ; 制作目标文件的信息
     9 00000000                                 [FILE "naskfunc.nas"]           ; 源文件名信息
    10 00000000                                         GLOBAL	_io_hlt, _io_cli, _io_sti, _io_stihlt           ; 程序中包含的函数名
    11 00000000                                 	GLOBAL	_io_in8,  _io_in16,  _io_in32
    12 00000000                                 	GLOBAL	_io_out8, _io_out16, _io_out32
    13 00000000                                 	GLOBAL	_io_load_eflags, _io_store_eflags
    14 00000000                                         GLOBAL	_load_gdtr, _load_idtr
    15 00000000                                         GLOBAL	_load_cr0, _store_cr0
    16 00000000                                         GLOBAL	_load_tr
    17 00000000                                         GLOBAL	_asm_inthandler20, _asm_inthandler21
    18 00000000                                         GLOBAL	_asm_inthandler27, _asm_inthandler2c
    19 00000000                                         GLOBAL	_memtest_sub
    20 00000000                                         GLOBAL	_farjmp
    21 00000000                                         EXTERN	_inthandler20, _inthandler21
    22 00000000                                         EXTERN	_inthandler27, _inthandler2c
    23 00000000                                 
    24 00000000                                 
    25 00000000                                 
    26 00000000                                 ; 以下是实际的函数
    27 00000000                                 
    28                                          [SECTION .text]                 ; 目标文件中写了这些之后再写程序
    29 00000000                                 
    30 00000000                                 
    31 00000000                                 _io_hlt:        ; void io_hlt(void);
    32 00000000 F4                                      HLT
    33 00000001 C3                                      RET
    34 00000002                                 
    35 00000002                                 _io_cli:        ; void io_cli(void);
    36 00000002 FA                                      CLI     
    37 00000003 C3                                      RET
    38 00000004                                 
    39 00000004                                 _io_sti:        ; void io_sti(void);
    40 00000004 FB                                      STI
    41 00000005 C3                                      RET
    42 00000006                                 
    43 00000006                                 _io_stihlt:     ; void io_stihlt(void);
    44 00000006 FB                                      STI
    45 00000007 F4                                      HLT
    46 00000008 C3                                      RET
    47 00000009                                 
    48 00000009                                 _io_in8:        ; int io_in8(int port);
    49 00000009 8B 54 24 04                             MOV     EDX,[ESP+4]     ; port
    50 0000000D B8 00000000                             MOV     EAX,0
    51 00000012 EC                                      IN      AL,DX
    52 00000013 C3                                      RET
    53 00000014                                 
    54 00000014                                 _io_in16:       ; int io_in16(int port);
    55 00000014 8B 54 24 04                             MOV     EDX,[ESP+4]     ; port
    56 00000018 B8 00000000                             MOV     EAX,0
    57 0000001D 66 ED                                   IN      AX,DX
    58 0000001F C3                                      RET
    59 00000020                                 
    60 00000020                                 _io_in32:	; int io_in32(int port);
    61 00000020 8B 54 24 04                             MOV	EDX,[ESP+4]		; port
    62 00000024 ED                                      IN	EAX,DX
    63 00000025 C3                                      RET
    64 00000026                                 
    65 00000026                                 _io_out8:	; void io_out8(int port, int data);
    66 00000026 8B 54 24 04                             MOV	EDX,[ESP+4]		; port
    67 0000002A 8A 44 24 08                             MOV	AL,[ESP+8]		; data
    68 0000002E EE                                      OUT	DX,AL
    69 0000002F C3                                      RET
    70 00000030                                 
    71 00000030                                 _io_out16:	; void io_out16(int port, int data);
    72 00000030 8B 54 24 04                             MOV	EDX,[ESP+4]		; port
    73 00000034 8B 44 24 08                             MOV	EAX,[ESP+8]		; data
    74 00000038 66 EF                                   OUT	DX,AX
    75 0000003A C3                                      RET
    76 0000003B                                 
    77 0000003B                                 _io_out32:	; void io_out32(int port, int data);
    78 0000003B 8B 54 24 04                             MOV	EDX,[ESP+4]		; port
    79 0000003F 8B 44 24 08                             MOV	EAX,[ESP+8]		; data
    80 00000043 EF                                      OUT	DX,EAX
    81 00000044 C3                                      RET
    82 00000045                                 
    83 00000045                                 _io_load_eflags:	; int io_load_eflags(void);
    84 00000045 9C                                      PUSHFD	        ; 指 PUSH EFLAGS 
    85 00000046 58                                      POP	EAX
    86 00000047 C3                                      RET
    87 00000048                                 
    88 00000048                                 _io_store_eflags:	; void io_store_eflags(int eflags);
    89 00000048 8B 44 24 04                             MOV	EAX,[ESP+4]
    90 0000004C 50                                      PUSH	EAX
    91 0000004D 9D                                      POPFD		; 指 POP EFLAGS
    92 0000004E C3                                      RET
    93 0000004F                                 
    94 0000004F                                 
    95 0000004F                                 ; 这个函数用来将指定的段上线(limit)和地址值赋值给名为GDTR的48位寄存器.
    96 0000004F                                 _load_gdtr:	        ; void load_gdtr(int limit, int addr);
    97 0000004F 66 8B 44 24 04                          MOV     AX,[ESP+4]      ; limit
    98 00000054 66 89 44 24 06                          MOV     [ESP+6],AX
    99 00000059 0F 01 54 24 06                          LGDT	[ESP+6]
   100 0000005E C3                                      RET
   101 0000005F                                 
   102 0000005F                                 _load_idtr:		; void load_idtr(int limit, int addr);
   103 0000005F 66 8B 44 24 04                          MOV     AX,[ESP+4]	; limit
   104 00000064 66 89 44 24 06                          MOV	[ESP+6],AX
   105 00000069 0F 01 5C 24 06                          LIDT	[ESP+6]
   106 0000006E C3                                      RET
   107 0000006F                                 
   108 0000006F                                 _load_cr0:		; int load_cr0(void);
   109 0000006F 0F 20 C0                                MOV		EAX,CR0
   110 00000072 C3                                      RET
   111 00000073                                 
   112 00000073                                 _store_cr0:		; void store_cr0(int cr0);
   113 00000073 8B 44 24 04                             MOV		EAX,[ESP+4]
   114 00000077 0F 22 C0                                MOV		CR0,EAX
   115 0000007A C3                                      RET
   116 0000007B                                 
   117 0000007B                                 _load_tr:		; void load_tr(int tr);
   118 0000007B 0F 00 5C 24 04                          LTR		[ESP+4]			; 向tr寄存器写入值
   119 00000080 C3                                      RET
   120 00000081                                 
   121 00000081                                 ; RET 指令相当于return
   122 00000081                                 
   123 00000081                                 ; 与EFLAGS相关指令: EFLAGS 没有MOV指令， 只有PUSHFD(push flags double-word)和POPFD(pop flags double-word)指令.
   124 00000081                                 
   125 00000081                                 ; 关于GDTR寄存器, 不能使用MOV来赋值, 唯一的方法是指定一个内存地址, 从指定的地址读取6个字节, 然后赋值给GDTR寄存器. 该寄存器的低16位,是段上限, ,它等于"GDT的有效字节数-1". 剩下的高32位代表GDT的开始地址.
   126 00000081                                 
   127 00000081                                 
   128 00000081                                 _asm_inthandler20:
   129 00000081 06                                      PUSH	ES
   130 00000082 1E                                      PUSH	DS
   131 00000083 60                                      PUSHAD
   132 00000084 89 E0                                   MOV		EAX,ESP
   133 00000086 50                                      PUSH	EAX
   134 00000087 66 8C D0                                MOV		AX,SS
   135 0000008A 8E D8                                   MOV		DS,AX
   136 0000008C 8E C0                                   MOV		ES,AX
   137 0000008E E8 [00000000]                           CALL	_inthandler20
   138 00000093 58                                      POP		EAX
   139 00000094 61                                      POPAD
   140 00000095 1F                                      POP		DS
   141 00000096 07                                      POP		ES
   142 00000097 CF                                      IRETD
   143 00000098                                 
   144 00000098                                 _asm_inthandler21:
   145 00000098 06                                      PUSH	ES
   146 00000099 1E                                      PUSH	DS
   147 0000009A 60                                      PUSHAD
   148 0000009B 89 E0                                   MOV		EAX,ESP
   149 0000009D 50                                      PUSH	EAX
   150 0000009E 66 8C D0                                MOV		AX,SS
   151 000000A1 8E D8                                   MOV		DS,AX
   152 000000A3 8E C0                                   MOV		ES,AX
   153 000000A5 E8 [00000000]                           CALL	_inthandler21
   154 000000AA 58                                      POP		EAX
   155 000000AB 61                                      POPAD
   156 000000AC 1F                                      POP		DS
   157 000000AD 07                                      POP		ES
   158 000000AE CF                                      IRETD
   159 000000AF                                 
   160 000000AF                                 _asm_inthandler27:
   161 000000AF 06                                      PUSH	ES
   162 000000B0 1E                                      PUSH	DS
   163 000000B1 60                                      PUSHAD
   164 000000B2 89 E0                                   MOV		EAX,ESP
   165 000000B4 50                                      PUSH	EAX
   166 000000B5 66 8C D0                                MOV		AX,SS
   167 000000B8 8E D8                                   MOV		DS,AX
   168 000000BA 8E C0                                   MOV		ES,AX
   169 000000BC E8 [00000000]                           CALL	_inthandler27
   170 000000C1 58                                      POP		EAX
   171 000000C2 61                                      POPAD
   172 000000C3 1F                                      POP		DS
   173 000000C4 07                                      POP		ES
   174 000000C5 CF                                      IRETD
   175 000000C6                                 
   176 000000C6                                 _asm_inthandler2c:
   177 000000C6 06                                      PUSH	ES
   178 000000C7 1E                                      PUSH	DS
   179 000000C8 60                                      PUSHAD
   180 000000C9 89 E0                                   MOV		EAX,ESP
   181 000000CB 50                                      PUSH	EAX
   182 000000CC 66 8C D0                                MOV		AX,SS
   183 000000CF 8E D8                                   MOV		DS,AX
   184 000000D1 8E C0                                   MOV		ES,AX
   185 000000D3 E8 [00000000]                           CALL	_inthandler2c
   186 000000D8 58                                      POP		EAX
   187 000000D9 61                                      POPAD
   188 000000DA 1F                                      POP		DS
   189 000000DB 07                                      POP		ES
   190 000000DC CF                                      IRETD
   191 000000DD                                 
   192 000000DD                                 
   193 000000DD                                 _memtest_sub:	; unsigned int memtest_sub(unsigned int start, unsigned int end)
   194 000000DD 57                                      PUSH	EDI                     	; 由于要使用(EBX, ESI, EDI)
   195 000000DE 56                                      PUSH	ESI
   196 000000DF 53                                      PUSH	EBX
   197 000000E0 BE AA55AA55                             MOV	ESI,0xaa55aa55			; pat0 = 0xaa55aa55;
   198 000000E5 BF 55AA55AA                             MOV	EDI,0x55aa55aa			; pat1 = 0x55aa55aa;
   199 000000EA 8B 44 24 10                             MOV	EAX,[ESP+12+4]			; i = start;
   200 000000EE                                 mts_loop:
   201 000000EE 89 C3                                   MOV     EBX,EAX
   202 000000F0 81 C3 00000FFC                          ADD	EBX,0xffc			; p = i + 0xffc;
   203 000000F6 8B 13                                   MOV	EDX,[EBX]			; old = *p;
   204 000000F8 89 33                                   MOV	[EBX],ESI			; *p = pat0;
   205 000000FA 83 33 FF                                XOR	DWORD [EBX],0xffffffff	; *p ^= 0xffffffff;
   206 000000FD 3B 3B                                   CMP	EDI,[EBX]			; if (*p != pat1) goto fin;
   207 000000FF 75 18                                   JNE	mts_fin
   208 00000101 83 33 FF                                XOR	DWORD [EBX],0xffffffff	; *p ^= 0xffffffff;
   209 00000104 3B 33                                   CMP	ESI,[EBX]			; if (*p != pat0) goto fin;
   210 00000106 75 11                                   JNE	mts_fin
   211 00000108 89 13                                   MOV	[EBX],EDX			; *p = old;
   212 0000010A 05 00001000                             ADD	EAX,0x1000			; i += 0x1000;
   213 0000010F 3B 44 24 14                             CMP	EAX,[ESP+12+8]			; if (i <= end) goto mts_loop;
   214 00000113 76 D9                                   JBE	mts_loop
   215 00000115 5B                                      POP	EBX
   216 00000116 5E                                      POP	ESI
   217 00000117 5F                                      POP	EDI
   218 00000118 C3                                      RET
   219 00000119                                 mts_fin:
   220 00000119 89 13                                   MOV	[EBX],EDX			; *p = old;
   221 0000011B 5B                                      POP	EBX
   222 0000011C 5E                                      POP	ESI
   223 0000011D 5F                                      POP	EDI
   224 0000011E C3                                      RET
   225 0000011F                                 _farjmp:	; void farjmp(int eip, int cs); 切换任务
   226 0000011F FF 6C 24 04                             JMP	FAR     [ESP+4]	        ; eip, cs  从指定位置读取4个字节存入EIP寄存器，然后再读取两个字节存入CS寄存器
   227 00000123 C3                                      RET
